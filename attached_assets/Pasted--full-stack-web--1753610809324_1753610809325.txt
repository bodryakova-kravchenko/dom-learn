Задача.
Создай максимально простое full-stack web-приложение представляющее собой сайт учебного курса для обучения студентов JavaScript DOM.

Применяемый стек технологий.
Backend web-приложения должен быть на Flask с подключением к Supabase. Frontend должен быть на чистом HTML, CSS, VanillaJS, без каких либо дополнительных фреймворков. Всё должно быть в минимальной конфигурации.

Общее содержание и функционал сайта
Сайт должен выглядеть как последовательность уроков разбитых на 4 уровня по сложности (и последовательности изучения). Внутри уровней должны быть разделы, внутри разделов уроки. (Для образца сделай в 1 уровне 1 раздел с 1 уроком). Каждый уровень со списков входящих в него разделов - должен быть отдельной web-страницей. 
Количество, порядок, названия уровней, разделов, уроков определяет админ. (в будущем будет примерно 10 разделов в каждом уровне и 10-20 уроков в каждом разделе). 
Структура URL должна быть примерно такая: level-1/section-1-<section_name>/lesson-1-<lesson_name>
Внутри каждой страницы уровня должны быть показаны разделы с якорными ссылками, а вверху страницы оглавление в виде ссылок, клик на ссылку должен перематывать станицу на место заголовка соответствующего раздела. Внутри каждого раздела после заголовка раздела, должны быть показаны заголовки уроков данного раздела, клик на заголовок урока вызывает переход на страницу соответствующего урока. 
Отдельной Главной страницы не нужно. При заходе на сайт пользователь должен сразу попадать на страницу уровней и разделов.
Делать отдельную страницу 404/ошибки не нужно.
Добавление уроков должно быть похоже на добавление постов в блоге. 

Описание урока
Каждый урок должен состоять из теоретического материала, тестирования, задач. 
Тесты должны быть простого типа: вопрос, 4 варианта ответа из которых только один правильный. Других типов тестов не нужно. Количество тестовых вопросов админ должен определять сам для каждого урока. (для образца сделай три тестовых вопроса в 1 уроке 1 раздела 1 уровня).
После каждого ответа - правильный ответ должен подсвечиваться зелёной галочкой, а неправильный - красным крестиком.
Прогресс и результаты прохождение тестов сохранять не нужно.
Статистика по пользователям (кто какие уроки прошел) не нужна.
Для задач интерактивный редактор с проверкой кода не нужен. Должно быть только условие задачи.
В конце каждого урока должны быть кнопки предыдущий/следующий/в оглавление, но только в рамках данного раздела. В последнем уроке раздела, должна быть кнопка перехода на страницу уровней/разделов.
Все данные урока, включая используемые в тексте изображения, хранятся в виде JSONB в базе данных Supabase.
Каждому уроку должна соответствовать отдельная страница.

Описание редактора
Для создания и редактирования уроков должен быть текстовый редактор с возможностью выбора шрифта, цвета, и других параметров текста для содержимого уроков. При редактировании текста урока не должно быть необходимости использовать HTML-тэги. Все возможности редактирования должны быть обеспечены командами текстового редактора. Также нужна  возможность добавления таблиц, списков, ссылок, изображений в текст уроков. Изображения могут вставляться в произвольное место текста урока.
Форматы изображений: png, jpg, webp, svg. Для поддержки форматов изображений используй необходимые библиотеки. Нужна возможность загрузки файлов изображений через админку и сохранять их в записи соответствующего урока. Предварительный просмотр загруженных изображений Не нужен. Ограничения на размер загружаемых файлов: максимум 5 МБ для изображений. Сжатие/оптимизация изображений не требуется.
Должна быть возможность в тексте выделять JavaScript, HTML, CSS код подсветкой. Для текстового редактора и подсветки синтаксиса используй любые подходящие библиотеки.
В задачах должна быть возможность вставки фрагментов кода.
Текстовый редактор должен быть в отдельной странице редактирования урока. Всё должно быть просто и минимально.

Описание админ-панели
Админ-панель должна быть на отдельной странице по адресу: <url сайта>/bod. Вход в админ панель должен быть с формой авторизации со следующими данными:
Логин: bodryakov.web
Пароль: Anna-140275
Вход в админ-панель должен быть только по URL. Кнопки входа на страницах сайта быть не должно.
Дополнительная защита от XSS/CSRF атак в админке не нужна.
На форме авторизации должен быть чек-бокс “запомнить меня” с запоминанием в localstorage на 30 дней.
Админ и редактор уроков должен быть только один, добавление других админов не нужно.
В Админ-панели должно быть предусмотрено добавление и удаление уровней, разделов, уроков, а также редактирование заголовков уровней, разделов, уроков. Удаление, добавление и редактирование должно обеспечиваться соответствующими кнопками с соответствующими иконками.
При удалении, модальное окно подтверждения не нужно.
В Админ-панели должно быть предусмотрено создание страниц уроков и текстов уроков, тестов, задач с помощью полнофункционального редактора текста. Также должна быть возможность добавлять изображения. В Админ-панели валидация не нужна.
После редактирования информации в админ-панели все изменения должны сохраняться в соответствующих записях Supabase. 
Всё должно быть просто и минимально.

Описание BackEnd
Должен быть функционал запросов с Flask на Supabase на создание, изменение, удаление JSONB данных уровней, разделов, уроков.
При выборе пользователем урока должна формироваться HTML-страница соответствующего урока.
Изображения должны храниться в Supabase Storage.
Всё должно быть просто и минимально.

Подключение к базе данных
После создания приложения спроси меня параметры подключения к SupaBase.
После этого напиши sql скрипт создания подходящей для этого приложения базы данных с нужной структурой таблиц и связей между ними.
Напиши sql скрипт заполнения базы данных тестовыми данными.

Описание дизайна
Дизайн web-приложения должен быть минималистичный, адаптивный, в светлой теме. Переключения светлой и тёмной темы не нужно. Цвета предпочтительны серые, голубые, синие.
Должен использоваться CSS фреймворк tailwind. Адаптив должен быть для 3 ширин экранов (конкретные значения ширин на твоё усмотрение).
Хлебные крошки не нужны.
Если нужны кастомные стили используй самый современный чистый CSS. Без поддержки старых браузеров. Вместо Flex используй Grid.
Всё должно быть просто и минимально.

Заключение
Для уточнения требований и параметров web приложения - задай мне дополнительные вопросы. 
Не начинай создавать приложение пока не получишь от меня ответ на все уточняющие вопросы.
После завершения создания приложения сформируй .zip-архив со всеми файлами кода и дай ссылку на скачивание.
Если во время создания приложения возникнут вопросы, останавливайся и задавай вопросы.

